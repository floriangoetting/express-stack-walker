import { Utils, WalkerOS, Hooks, Schema } from '@elbwalker/types';

declare const Const: {
    Commands: {
        [key: string]: string;
    };
    Utils: {
        Storage: {
            [key: string]: Utils.StorageType;
        };
    };
};

declare function assign<T>(target: T, source?: Object): T;

declare function castValue(value: unknown): WalkerOS.PropertyType;

declare function getByStringDot(event: unknown, key: string, i?: unknown): unknown;

declare function getId(length?: number): string;

declare function getMarketingParameters(url: URL, custom?: Utils.MarketingParameters): WalkerOS.Properties;

declare function debounce<P extends unknown[], R>(fn: (...args: P) => R, wait?: number): (...args: P) => Promise<R>;
declare function throttle<P extends unknown[], R>(fn: (...args: P) => R | undefined, delay?: number): (...args: P) => R | undefined;

declare function isSameType<T>(variable: unknown, type: T): variable is typeof type;

declare function onLog(message: unknown, verbose?: boolean): void;

declare function throwError(error: unknown): never;

declare function trim(str: string): string;

declare function tryCatch<P extends unknown[], R, S>(fn: (...args: P) => R | undefined, onError: (err: unknown) => S): (...args: P) => R | S;
declare function tryCatch<P extends unknown[], R>(fn: (...args: P) => R | undefined): (...args: P) => R | undefined;
declare function tryCatchAsync<P extends unknown[], R, S>(fn: (...args: P) => R, onError: (err: unknown) => S): (...args: P) => Promise<R | S>;
declare function tryCatchAsync<P extends unknown[], R>(fn: (...args: P) => R): (...args: P) => Promise<R | undefined>;

declare function useHooks<P extends any[], R>(fn: (...args: P) => R, name: string, hooks: Hooks.Functions): (...args: P) => R;

declare function validateEvent(obj: unknown, customContracts?: Schema.Contracts): WalkerOS.Event | never;
declare function validateProperty(obj: WalkerOS.AnyObject, key: string, value: unknown, schema: Schema.Property): WalkerOS.Property | never;

declare function getAttribute(element: Element, name: string): string;

declare function isVisible(element: HTMLElement): boolean;

declare function sessionStart(config?: Utils.SessionStart): WalkerOS.Properties | false;

declare function storageDelete(key: string, storage?: Utils.StorageType): void;
declare function storageRead(key: string, storage?: Utils.StorageType): WalkerOS.PropertyType;
declare function storageWrite(key: string, value: WalkerOS.PropertyType, maxAgeInMinutes?: number, storage?: Utils.StorageType, domain?: string): WalkerOS.PropertyType;

export { Const, assign, castValue, debounce, getAttribute, getByStringDot, getId, getMarketingParameters, isSameType, isVisible, onLog, sessionStart, storageDelete, storageRead, storageWrite, throttle, throwError, trim, tryCatch, tryCatchAsync, useHooks, validateEvent, validateProperty };
